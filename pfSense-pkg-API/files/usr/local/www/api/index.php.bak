<?php
//    Copyright 2023 Jared Hendrickson
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

use API\Core\Response;
use API\Models\APISettings;
use function API\Core\Tools\form_data_to_model_representation;

require_once("guiconfig.inc");
require_once("api/auto_loader.inc");

# Initialize the pfSense UI page (note: $pgtitle must be defined before including head.inc)
$pgtitle = array(gettext('System'), gettext('API'), gettext('Settings'));
include('head.inc');
echo "<link rel='stylesheet' href='/css/api/api.css'/>";
echo "<script type='application/javascript' src='/js/api.js'></script>";
$update_tab = "Update";
$tab_array = [[gettext("Settings"), true, "/api/"], [gettext("Documentation"), false, "/api/documentation/"], [gettext($update_tab), false, "/api/update/"]];
display_top_tabs($tab_array, true);    # Ensure the tabs are written to the top of page

# Variables
$form = new Form(false);
$general_section = new Form_Section('General Settings');
$key_section = new Form_Section('API Key Settings');
$jwt_section = new Form_Section('JWT Settings');
$advanced_section = new Form_Section('Advanced Settings', 'api-advanced-settings');
$api_settings = new APISettings();
$pkg_index = APISettings::get_api_config()["id"];
$pkg_config = APISettings::get_api_config()["config"];
$input_errors = [];

# Generate new API key if requested
if ($_POST["gen"] === "1") {
    $new_key = API\Core\Auth::generate_key($_SESSION["Username"]);
    print_apply_result_box(0, "\nSave this API key somewhere safe, it cannot be viewed again: \n".$new_key);
}

# Rotate JWT server key if requested
if ($_POST["rotate_server_key"]) {
    API\Core\Auth::init_jwt_server_key(rotate: true);
    print_apply_result_box(0, "\nRotated server key.\n");
}

# Remove the corresponding API key if a key deletion was requested
if (isset($_POST["del"]) and is_numeric($_POST["del"])) {
    $del_key = $_POST["del"];
    config_del_path("installedpackages/package/{$pkg_index}/conf/keys/key/{$del_key}");
    $change_note = " Deleted API key";
    write_config(sprintf(gettext($change_note)));
    print_apply_result_box(0);
}

# Upon normal save, update changed values
if (isset($_POST["save"])) {
    # Update settings with the newly provided values
    $representation_data = form_data_to_model_representation(form_data: $_POST, model: $api_settings);
    $api_settings = new APISettings(representation_data: $representation_data);

    try {
        $api_settings->update();
    }
    catch (Response $resp_error) {
        $input_errors = [$resp_error->getMessage()];
    }

    # Only write changes if no errors occurred
    if (!$input_errors) {
        print_apply_result_box(0);
    } else {
        print_input_errors($input_errors);
    }
}

# Backup our configuration is persist is enabled and the request is a POST request
if(isset($pkg_config["persist"]) and $_SERVER["REQUEST_METHOD"] === "POST") {
    shell_exec("/usr/local/share/pfSense-pkg-API/manage.php backup");
}

# Sync our configuration if HA sync is enabled
if(isset($pkg_config["hasync"]) and $_SERVER["REQUEST_METHOD"] === "POST") {
    # Use ob_start()/ob_end_clean() to prevent sync() from printing output
    ob_start();
    APITools\sync();
    ob_end_clean();
}

# Generate

# Populate the GENERAL section of the UI form
$general_section->addInput(new Form_Checkbox(
    'enabled',
    'Enabled',
    'Enable API',
    $api_settings->enabled->value,
    $api_settings->enabled->indicates_true
));

$general_section->addInput(new Form_Checkbox(
    'read_only',
    'Read-only',
    'Enable read-only access',
    $api_settings->read_only->value,
    $api_settings->read_only->indicates_true
))->setHelp("Only allow API calls with read access. Leave unchecked for read/write access.");

$general_section->addInput(new Form_Checkbox(
    'keep_backup',
    'Keep Backup Configuration',
    'Enable API configuration backup',
    $api_settings->keep_backup->value,
    $api_settings->keep_backup->indicates_true
))->setHelp(
    "Keep existing API configuration when updating or uninstalling the pfSense API package. If checked, a copy of the 
    API configuration will be kept. If unchecked, all API configuration including API keys will be lost when 
    updating or uninstalling the package."
);

$general_section->addInput(new Form_Select(
    'allowed_interfaces',
    'Network Interfaces',
    $api_settings->allowed_interfaces->to_internal_interfaces(),
    get_configured_interface_with_descr(true),
    true
))->setHelp(
    "Select interfaces that are allowed to respond to API requests."
);

$general_section->addInput(new Form_Select(
    'auth_mode',
    'Authentication Mode',
    $api_settings->auth_mode->value,
    ["local" => "Local Database", "key" => "API Key", "jwt" => "JWT"]
))->setHelp(
    "Select the mode used to authenticate API requests. See the <a href='/api/documentation/'>developer documentation</a>
    for more information on API authentication."
);

# Add toggle button to show/hide the advanced settings
$show_adv_btn = new Form_Button('display_advanced', 'Display Advanced', null, 'fa-cog');
$show_adv_btn->setAttribute('type','button')->addClass('btn-info btn-sm')->setOnClick("toggle_advanced_settings()");
$general_section->addInput(new Form_StaticText('Advanced Settings', $show_adv_btn));

### Populate the API KEY section of the UI form
$key_section->addInput(new Form_Select(
    'key_hash_algo',
    'Key Hash Algorithm',
    $api_settings->key_hash_algo->value,
    $api_settings->key_hash_algo->choices
))->setHelp(
    "Select the hashing algorithm used when generating API keys."
);

$key_section->addInput(new Form_Select(
    'key_length_bytes',
    'Key Byte Strength',
    $api_settings->key_length_bytes->value,
    ["16"=>"16", "32"=>"32", "64"=>"64"]
))->setHelp(
    "Select the byte strength used when generating API keys."
);

### Populate the JWT section of the UI form
$jwt_section->addInput(new Form_Input(
    'jwt_exp',
    'JWT Expiration',
    'number',
    $api_settings->jwt_exp->value,
    ["min"=>$api_settings->jwt_exp->minimum, "max"=>$api_settings->jwt_exp->maximum]
))->setHelp(
    "How long (in seconds) the JWT is valid for. Allows a minimum of ".$api_settings->jwt_exp->minimum." seconds and a
    maximum of ".$api_settings->jwt_exp->maximum." seconds."
);

### Populate the ADVANCED section of the UI form
$advanced_section->addClass("hide-api-advanced-settings");
$advanced_section->addInput(new Form_Checkbox(
    'login_protection',
    'Login Protection',
    'Enable API Login Protection',
    $api_settings->login_protection->value,
    $api_settings->login_protection->indicates_true,
))->setHelp(
    "Include API authentication in pfSense's Login Protection feature. When enabled, all API authentication requests
    will be logged and monitored for authentication attempts. Disabling this field will not disable Login Protection 
    system-wide, but API endpoints will not utilize Login Protection and may be more susceptible to brute force or 
    other authentication-based attacks. Login Protection can be configured system-wide under 
    <a href='/system_advanced_admin.php'>System > Advanced</a>."
);
$advanced_section->addInput(new Form_Checkbox(
    'log_successful_auth',
    'Log All Authentication',
    'Enable Logging of All API Authentication Attempts',
    $api_settings->log_successful_auth->value,
    $api_settings->log_successful_auth->indicates_true
))->setHelp(
    "Log all API authentication attempts, even successful authentication. By default, only failed API authentication
    attempts are logged (if API Login Protection is enabled above). This setting enforces all API authentication to
    be logged instead. This may cause a lot of unnecessary syslog entries and is disabled by default."
);
$advanced_section->addInput(new Form_Checkbox(
    'ha_sync',
    'Sync API Configuration',
    'Enable HA Sync',
    $api_settings->ha_sync->value,
    $api_settings->ha_sync->indicates_true
))->setHelp("Automatically sync API configuration and keys to HA peers.");
$advanced_section->addInput(new Form_Checkbox(
    'ha_sync_validate_certs',
    'HA Sync Validate Certificates',
    'Enable Certificate Validation for HA Sync',
    $api_settings->ha_sync_validate_certs->value,
    $api_settings->ha_sync_validate_certs->indicates_true
))->setHelp(
    "Enable or disable certificate validation for API sync functions. If enabled, all HA peers must use a certificate
    trusted by the primary node (this firewall)."
);
$advanced_section->addInput(new Form_Input(
    'ha_sync_hosts',
    'HA Sync Hosts',
    'text',
    $api_settings->ha_sync_hosts->value
))->setHelp(
    "Enter the host(s) to sync API configurations to. Multiple hosts may be specified separated by a single space. Each
    host must use the same webConfigurator protocol and port."
);
$advanced_section->addInput(new Form_Input(
    'ha_sync_username',
    'HA Sync Username',
    'text',
    $api_settings->ha_sync_password->value
))->setHelp(
    "Enter the username of user to authenticate with when syncing. This user must have access to the API settings page."
);
$advanced_section->addPassword(new Form_Input(
    'ha_sync_password',
    'HA Sync Password',
    'password',
    ''
))->setHelp(
    'Enter the password of the HA sync user listed above. After saving, the password will be hidden and this field will 
    be blank. '
);


# Populate the entire form
$form->add($general_section);
$form->add($advanced_section);
($api_settings->auth_mode->value === "key") ? $form->add($key_section) : null;
($api_settings->auth_mode->value === "jwt") ? $form->add($jwt_section) : null;

# Add buttons below the form
$rotate_btn = new Form_Button('rotate_server_key', 'Rotate server key', null, 'fa-repeat');
$rotate_btn->addClass('btn btn-sm btn-success');
$rotate_btn->setOnclick("return confirm(\"Rotating the server key will void any existing JWTs. Proceed?\");");
$form->addGlobal(new Form_Button('save', 'Save', null, 'fa-save'))->addClass('btn btn-sm btn-primary api-save-btn');
(in_array($pkg_config["authmode"], ["jwt"])) ? $form->addGlobal($rotate_btn) : null;
$form->addGlobal(new Form_Button('report', 'Report an Issue', 'https://github.com/jaredhendrickson13/pfsense-api/issues/new/choose', ''))->addClass('fa fa-question-circle api-report');

# Display the populated configuration form
print $form;

# POPULATE KEY TABLE IF KEY AUTH MODE IS SET
if ($api_settings->auth_mode->value === "key") {
    # Pull credentials if configured
    $user_creds = API\Core\Auth::get_existing_keys($_SESSION["Username"]);
    echo "<div class=\"panel panel-default\">".PHP_EOL;
    echo "    <div class=\"panel-heading\">".PHP_EOL;
    echo "        <h2 class=\"panel-title\">API Keys</h2>".PHP_EOL;
    echo "        </div>".PHP_EOL;
    echo "    <div class=\"panel-body\">".PHP_EOL;
    echo "        <div class=\"table-responsive\">".PHP_EOL;
    echo "            <table class=\"table table-striped table-hover table-compact sortable-theme-bootstrap\" data-sortable>".PHP_EOL;
    echo "                <thead>".PHP_EOL;
    echo "                    <tr>".PHP_EOL;
    echo "                        <th>USERNAME</th>".PHP_EOL;
    echo "                        <th>KEY HASH</th>".PHP_EOL;
    echo "                        <th>HASH ALGORITHM</th>".PHP_EOL;
    echo "                    </tr>".PHP_EOL;
    echo "                </thead>".PHP_EOL;
    echo "                <tbody>".PHP_EOL;
    if (!empty($user_creds)) {
        foreach ($user_creds as $id => $key) {
            $formatted_key = strlen($key["hash"]) > 20 ? substr($key["hash"],0,20)."..." : $key["hash"];
            echo "                    <tr>" . PHP_EOL;
            echo "                        <td>" . $key["username"] . "</td>" . PHP_EOL;
            echo "                        <td>$formatted_key</td>" . PHP_EOL;
            echo "                        <td>".$key["algo"]."</td>" . PHP_EOL;
            echo "                        <td><a class=\"fa fa-trash\"	title=\"Delete API key\" href=\"/api/?del=".$id."\" usepost></a></td>".PHP_EOL;
            echo "                    </tr>" . PHP_EOL;
        }
    }
    echo "                </tbody>".PHP_EOL;
    echo "            </table>".PHP_EOL;
    echo "        </div>".PHP_EOL;
    echo "    </div>".PHP_EOL;
    echo "</div>".PHP_EOL;
    echo "<nav class=\"action-buttons\">";
    echo "    <a class=\"btn btn-sm btn-success\" href=\"/api/?gen=1\" usepost>";
    echo "        <i class=\"fa fa-plus icon-embed-btn\"></i>";
    echo "        Generate	</a>";
    echo "</nav>";
}

include('foot.inc');
