<?php

namespace RESTAPI\Models;

use RESTAPI\Core\Model;
use RESTAPI\Dispatchers\FirewallApplyDispatcher;
use RESTAPI\Dispatchers\WebGUIRestartDispatcher;
use RESTAPI\Fields\BooleanField;
use RESTAPI\Fields\IntegerField;
use RESTAPI\Fields\InterfaceField;
use RESTAPI\Fields\StringField;
use RESTAPI\Validators\IPAddressValidator;

class LogSettings extends Model
{
    public StringField $format;
    public BooleanField $reverseorder;
    public IntegerField $nentries;
    public BooleanField $nologdefaultblock;
    public BooleanField $nologdefaultpass;
    public BooleanField $nologbogons;
    public BooleanField $nologprivatenets;
    public BooleanField $nolognginx;
    public BooleanField $rawfilter;
    public BooleanField $disablelocallogging;
    public BooleanField $logconfigchanges;
    public IntegerField $filterdescriptions;
    public IntegerField $logfilesize;
    public IntegerField $rotatecount;
    public StringField $logcompressiontype;
    public BooleanField $enableremotelogging;
    public StringField $ipprotocol;
    public InterfaceField $sourceip;
    public StringField $remoteserver;
    public StringField $remoteserver2;
    public StringField $remoteserver3;
    public BooleanField $logall;
    public BooleanField $filter;
    public BooleanField $dhcp;
    public BooleanField $auth;
    public BooleanField $portalauth;
    public BooleanField $vpn;
    public BooleanField $dpinger;
    public BooleanField $hostapd;
    public BooleanField $system;
    public BooleanField $resolver;
    public BooleanField $ppp;
    public BooleanField $routing;
    public BooleanField $ntpd;

    public function __construct(mixed $id = null, mixed $parent_id = null, mixed $data = [], ...$options)
    {
        # Set model attributes
        $this->config_path = 'syslog';
        $this->many = false;
        $this->always_apply = true;

        # Set model fields
        $this->format = new StringField(
            default: 'rfc3164',
            choices: ['rfc3164', 'rfc5424'],
            help_text: 'The format of the log entries.',
        );
        $this->reverseorder = new BooleanField(
            default: false,
            internal_name: 'reverse', # We can't use 'reverse' as the field name because it is a reserved field name
            help_text: 'Reverse the order of log entries.',
        );
        $this->nentries = new IntegerField(
            default: 500,
            minimum: 5,
            maximum: 20000,
            help_text: 'The number of log entries to display in the UI.',
        );
        $this->nologdefaultblock = new BooleanField(
            default: false,
            help_text: 'Do not log packets that are blocked by the implicit default block rule.',
        );
        $this->nologdefaultpass = new BooleanField(
            default: false,
            help_text: 'Do not log packets that are allowed by the implicit default pass rule.',
        );
        $this->nologbogons = new BooleanField(
            default: false,
            help_text: 'Log packets blocked by Block Bogon Networks rules.',
        );
        $this->nologprivatenets = new BooleanField(
            default: false,
            help_text: 'Log packets blocked by Block Private Networks rules.',
        );
        $this->nolognginx = new BooleanField(
            default: false,
            help_text: 'Do not Log errors from the web server process.',
        );
        $this->rawfilter = new BooleanField(
            default: false,
            help_text: 'Display logs in the UI as they are generated by the packet filter, without any formatting.',
        );
        $this->disablelocallogging = new BooleanField(
            default: false,
            help_text: 'Disable writing log entries to the local disk. WARNING: This will also disable Login Protection!',
        );
        $this->logconfigchanges = new BooleanField(
            default: false,
            help_text: 'Log changes made to the pfSense configuration.',
        );
        $this->filterdescriptions = new IntegerField(
            default: 0,
            choices: [0, 1, 2],
            help_text: 'Display filter descriptions in the log entries Use `0` to not load descriptions, `1` to '.
                'display descriptions in their own column, or `2` to display the description in a second row.',
        );
        $this->logfilesize = new IntegerField(
            default: 512000,
            minimum: 100000,
            maximum: 2147483648,
            help_text: 'The maximum size of the log file in kilobytes.',
        );
        $this->rotatecount = new IntegerField(
            default: 5,
            minimum: 0,
            maximum: 99,
            help_text: 'The number of log file rotations to keep.',
        );
        $this->logcompressiontype = new StringField(
            default: 'bzip2',
            choices: ['bzip2', 'gzip', 'xz', 'zstd', 'none'],
            help_text: 'The type of compression to use for log files.',
        );
        $this->enableremotelogging = new BooleanField(
            default: false,
            internal_name: 'enable',
            help_text: 'Enable remote logging.',
        );
        $this->ipprotocol = new StringField(
            default: 'ipv4',
            choices: ['ipv4', 'ipv6'],
            conditions: ['enableremotelogging' => true],
            help_text: 'The IP protocol to use for remote logging.',
        );
        $this->sourceip = new InterfaceField(
            default: '',
            allow_localhost_interface: true,
            allow_custom: [''],
            allow_empty: true,
            conditions: ['enableremotelogging' => true],
            help_text: 'The interface to use as the source IP address for remote logging.',
        );
        $this->remoteserver = new StringField(
            default: null,
            allow_null: true,
            conditions: ['enableremotelogging' => true],
            validators: [new IPAddressValidator(allow_fqdn: true, allow_port: true)],
            help_text: 'The first remote syslog server to send log entries to.',
        );
        $this->remoteserver2 = new StringField(
            default: null,
            allow_null: true,
            conditions: ['enableremotelogging' => true, '!remoteserver' => null],
            validators: [new IPAddressValidator(allow_fqdn: true, allow_port: true)],
            help_text: 'The second remote syslog server to send log entries to.',
        );
        $this->remoteserver3 = new StringField(
            default: null,
            allow_null: true,
            conditions: ['enableremotelogging' => true, '!remoteserver' => null, '!remoteserver2' => null],
            validators: [new IPAddressValidator(allow_fqdn: true, allow_port: true)],
            help_text: 'The third remote syslog server to send log entries to.',
        );
        $this->logall = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true],
            help_text: 'Log everything to the remote syslog server(s).',
        );
        $this->filter = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log filter events to the remote syslog server(s).',
        );
        $this->dhcp = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log DHCP events to the remote syslog server(s).',
        );
        $this->auth = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log authentication events to the remote syslog server(s).',
        );
        $this->portalauth = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log captive portal authentication events to the remote syslog server(s).',
        );
        $this->vpn = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log VPN events to the remote syslog server(s).',
        );
        $this->dpinger = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log gateway monitoring events to the remote syslog server(s).',
        );
        $this->hostapd = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log wireless authentication events to the remote syslog server(s).',
        );
        $this->system = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log system events to the remote syslog server(s).',
        );
        $this->resolver = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log DNS resolver events to the remote syslog server(s).',
        );
        $this->ppp = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log PPP events to the remote syslog server(s).',
        );
        $this->routing = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log routing events to the remote syslog server(s).',
        );
        $this->ntpd = new BooleanField(
            default: false,
            conditions: ['enableremotelogging' => true, '!logall' => true],
            help_text: 'Log NTP events to the remote syslog server(s).',
        );

        parent::__construct($id, $parent_id, $data, ...$options);
    }

    /**
     * Applies changes to the log settings.
     */
    public function apply(): void {
        # Remove old log rotations if the compression type has changed
        if ($this->logcompressiontype->value !== $this->initial_object->logcompressiontype->value) {
            foreach (system_syslogd_get_all_logfilenames() as $log_file) {
                unlink_if_exists("/var/log/$log_file.log.*");
            }
        }

        # Restart syslogd
        system_syslogd_start();

        # Restart the webConfigurator if nginx logging settings were changed
        if ($this->nolognginx->value !== $this->initial_object->nolognginx->value) {
            # Always do this asynchronously to prevent killing the current request
            (new WebGUIRestartDispatcher(async: true))->spawn_process();
        }

        # Reload the firewall filter filter logging changes were made
        if ($this->has_filter_log_changed()) {
            (new FirewallApplyDispatcher(async: $this->async))->spawn_process();
        }
    }

    /**
     * Checks if log settings related to the filter were changed
     */
    private function has_filter_log_changed(): bool {
        return (
            $this->nologdefaultblock->value !== $this->initial_object->nologdefaultblock->value or
            $this->nologdefaultpass->value !== $this->initial_object->nologdefaultpass->value or
            $this->nologbogons->value !== $this->initial_object->nologbogons->value or
            $this->nologprivatenets->value !== $this->initial_object->nologprivatenets->value
        );
    }
}