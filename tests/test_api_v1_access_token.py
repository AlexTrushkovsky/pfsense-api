# Copyright 2022 Jared Hendrickson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Script used to test the /api/v1/access_token endpoint."""
import e2e_test_framework


class APIE2ETestAccessToken(e2e_test_framework.APIE2ETest):
    """Class used to test the /api/v1/access_token endpoint."""
    uri = "/api/v1/access_token"
    post_tests = [
        {
            "name": "Change auth mode to local to test JWT restriction",
            "uri": "/api/v1/system/api",
            "method": "PUT",
            "payload": {"authmode": "local"}
        },
        {
            "name": "Ensure clients cannot request JWT when auth mode is not jwt",
            "status": 403,
            "return": 9
        },
        {
            "name": "Change auth mode to jwt to test JWT authentication",
            "uri": "/api/v1/system/api",
            "method": "PUT",
            "payload": {"authmode": "jwt"}
        },
        {
            "name": "Test JWT authentication and change authentication mode back to original value",
            "uri": "/api/v1/system/api",
            "method": "PUT"
            # Payload is generated by pre_post() method
        }
    ]

    def pre_post(self):
        # Save the original auth mode and change the test frameworks auth mode to local on test 1
        if len(self.post_responses) == 1:
            self.test_access_token_orig_auth_mode = self.args.auth_mode
            self.args.auth_mode = "local"
        # Update the API config back to the original auth method, this test will also use JWT auth to do so.
        if len(self.post_responses) == 3:
            self.args.auth_mode = "jwt"
            self.post_tests[3]["payload"] = {"authmode": self.test_access_token_orig_auth_mode}

    def post_post(self):
        # Revert the testing frameworks auth mode to original value now after final test
        if len(self.post_responses) == 4:
            self.args.auth_mode = self.test_access_token_orig_auth_mode


APIE2ETestAccessToken()
